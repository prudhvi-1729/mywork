class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        board=[['.']*n for i in range(n)]
        self.nQueen(board,0)
        return [[''.join(i) for i in board]]
    def nQueen(self,board,row):
        if row>=len(board):
            return True
        for i in range(len(board)):
            if self.safePosition(board,row,i):
                board[row][i]='Q'
                if self.nQueen(board,row+1):
                    return True
                board[row][i]='.'
        return False        
    def safePosition(self,board,row,col):
        for i in range(row,-1,-1):
            if board[i][col]=='Q':
                return False
        for i,j in zip(range(row,-1,-1),range(col,-1,-1)):
            if board[i][j]=='Q':
                return False
        for i,j in zip(range(row,-1,-1),range(col,len(board),1)):
            if board[i][j]=='Q':
                return False
        return True    
                
            
        
